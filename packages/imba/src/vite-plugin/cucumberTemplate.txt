import {parseFeatureIntoSteps} from "imba/plugin"

const modules = import.meta.glob('{{stepDefsGlob}}', {eager: yes})
const baseContexts = import.meta.glob('./**/*.context.imba', {eager: yes})
let s
let c
let elName
let contexts = {}
let text
let stepRes
let keyword
let currentContext

const decorators = {}

{{#if retry}}
vi.setConfig
	retry: {{retry}}
{{/if}}
{{#if hasNoTimeout}}
vi.setConfig 
	testTimeout: 50000000
	hookTimeout: 50000000
{{/if}}

def executeStep(text, keyword, context)
	let s = global.Steps.find(text, keyword).stepDefinition
	if const ext = s.target.extendContext
		await ext(context)
	let res = await s.target[s.fname]
		.apply(
			context,
			# variables
			[s.cucumberExpression.match(text).map(do $1.getValue!)]
		)

	# Assertions throw an error if accessed (they use a proxy)
	return if res..__flags
	return unless const features = res..__features
	await features.reduce(&, do 1) do(acc, feature)
		await acc
		const steps = await parseFeatureIntoSteps(feature)
		await steps.reduce(&, do 1) do(acc, step)
			await acc
			await executeStep(step.text, step.keyword, context)


beforeAll do(suite)
	{{#each feature.tags}}
	decorators['{{this.name}}'] = '{{this.value}}' or yes
	   
	{{/each}}
beforeEach do(suite)

	let contextName = 'BaseContext'
	const baseContext = Object.values(baseContexts).find(do $1[contextName])..[contextName]
	{{#each feature.elements}}
	elName = '{{{ this.keyword }}}: {{{ this.name }}}'
	if suite.meta.name == elName or suite.meta.suite..suite..name == elName
		suite.meta.decorators = decorators
		{{#each this.tags}}
		suite.meta.decorators['{{this.name}}'] = '{{this.value}}' or yes
		
		{{/each}}
		{{!-- L "creating context c{{ @index }}" --}}
		contexts.c{{ @index }} = {
			context: global.__ccContext(baseContext, suite.meta)
			name: elName
		}
	{{/each}}

	{{#if backgroundEl}}
	   {{#each backgroundEl.steps}}
	# find the context for the current test this beforeEach hook is running before
	c = Object.keys(contexts).find(do 
		contexts[$1].name == suite.meta.name or contexts[$1].name == suite.meta.suite..suite..name 
	)
	await executeStep('{{{escape this.text}}}', '{{this.keyword}}', contexts[c].context)

	   {{/each}}
	{{/if}}

{{decoratedSuite 'describe' this}} 'Feature: {{ feature.name }}' do
{{#each feature.elements}}
	{{#if (isScenarioOutline this.keyword ../feature.language)}}
	{{decoratedSuite 'describe' this}} '{{ this.keyword }}: {{ escape this.name }}' do
		{{#each this.examples}}
		{{decoratedSuite 'describe' this}} 'Examples group {{ @index }}: {{ escape this.name}}' do
			{{#each this.body}}
			{{decoratedSuite 'test' this}} 'Example {{ @index }}: {{getDescriptionFromCells this.cells}}' do(suite)
				{{#each ../../this.steps}}
				text = '{{{ escape this.text }}}'
					{{#each ../this.cells}}
				text = text.replaceAll('<{{getCellValue ../../../this.header @index}}>', {{{getOriginalValue this.value}}})
					{{/each}}
				keyword = '{{{ this.keyword }}}'
				currentContext = contexts.c{{ @../../../index }}.context
				await executeStep(text, keyword, currentContext)
				{{/each}}
			{{/each}}
		{{/each}}
	{{/if}}
	{{#if (isScenario this.keyword ../feature.language)}}
	{{decoratedSuite 'test' this}} '{{ this.keyword }}: {{ escape this.name }}' do
		{{#each this.steps}}
		text = '{{{ escape this.text }}}'
		keyword = '{{{ this.keyword }}}'
		currentContext = contexts.c{{ @../index }}.context
		await executeStep(text, keyword, currentContext)
		{{/each}}
	{{/if}}
{{/each}}