#!/usr/bin/env node

var path = require('path');
var fs = require('fs');
var dir = path.join(path.dirname(fs.realpathSync(__filename)), '..',path.sep);

var enableDebugLog = false;

// Return the module for webpack
if(require.main !== module){
	var loader = {
		"test": /\.imba$/,
		"loader": dir + "loader.js"
	}

	var webpack = require(path.join(require.main.filename, '..','..'));
	var WebpackOptionsDefaulter = webpack.WebpackOptionsDefaulter;
	var options = {};
	var defaulter = new WebpackOptionsDefaulter;
	defaulter.process(options);

	var conf = {
		module: {
			rules: []
		},
		resolve: {
			extensions: options.resolve.extensions,
			alias: {
				imba$: dir + "imba.imba",
				imba: dir
			}

		}
	}

	function mergeConfig(obj){
		var m = (obj.module = obj.module || {rules: []})
		var r = (obj.resolve = obj.resolve || {});
		// TODO merge instead of overriding module/resolve

		var imbaLoader = Object.assign({},loader);
		var loaders = m.rules || m.loaders;

		if (loaders) {
			// add the imba loader
			var l = null;
			loaders.forEach(function(loader){
				if(String(loader.test).replace('$','') == '/\\.imba/'){
					l = imbaLoader = loader;
					l.loader = loader.loader;
				}
			});
			// push our loader of we have one
			if (!l){ loaders.unshift(imbaLoader) }
		} else {
			m.rules = [imbaLoader];
		}

		if (!r.extensions) {
			r.extensions = conf.resolve.extensions.slice(0)
		}

		var idx = r.extensions[0] == '' ? 1 : 0;
		r.extensions.splice(idx,0,'.imba')

		if (!obj.target){
			r.extensions.splice(idx,0,'.web.imba')
		} else if (obj.target) {
			r.extensions.splice(idx,0,'.'+obj.target+'.imba')
		}

		// Set correct alias
		r.alias = r.alias || {}
		r.alias.imba$ = dir + "imba.imba"
		r.alias.imba = dir

		if(obj.loader && obj.loader.imba) {
			imbaLoader.options = Object.assign(imbaLoader.options || {}, obj.loader.imba);
			delete obj.loader.imba;
			if(Object.keys(obj.loader).length == 0){
				delete obj.loader;
			}
		}

		return obj;
	}

	// check for existing config
	
	var cfgPath = process.env.IMBAPACK_BASECONF;
	if (cfgPath){
		var baseconf = require(cfgPath);
		if (baseconf instanceof Array){
			baseconf.forEach(function(v){ mergeConfig(v); })
		} else {
			mergeConfig(baseconf);
		}
		module.exports = baseconf;
	} else {
		mergeConfig(conf);
		module.exports = conf;
	}
	return;
}



var cp = require('child_process');
var args = process.argv.slice(2);
var env = Object.assign({}, process.env);
var cwd = process.cwd();

var cfgIdx = args.indexOf('--config') + 1;
var cfgPath = cfgIdx > 0 ? args[cfgIdx] : 'webpack.config.js';
var cfg = path.resolve(cwd,cfgPath);

var webpackBin = 'webpack';
var imbapackBin = path.join(dir,'bin','imbapack');

if(enableDebugLog) console.log('arguments',args,__dirname,process.cwd(),cfgPath,cfg);
// TODO drop default config if input/output is declared in process args

if (fs.existsSync(cfg)){
	env.IMBAPACK_BASECONF = cfg;
}


// possibly use the local imbapack instead?
cp.exec('npm bin', function(e,stdout,stderr){
	var binDir = stdout.split('\n')[0];

	// if there is a local installation of imbapack
	// make sure it is the file generating the config
	if(fs.existsSync(path.join(binDir,'imbapack'))){
		imbapackBin = path.join(binDir,'imbapack');
	}

	if (cfgIdx){
		args[cfgIdx] = imbapackBin
	} else {
		args.push("--config");
		args.push(imbapackBin);
	}


    // use path.join() for safe file path checking checking
    var existsSyncSafe = fs.existsSync(path.join(binDir,'webpack'));

	if(existsSyncSafe){
		webpackBin = path.join(binDir,'webpack');
	}

    // Determine if Windows, to use WHICH vs DIR in find
    var isWindows = /^win/.test(process.platform);
    var findOperator = isWindows ? "DIR" : "which";

    // Use path.normalize to escape double slashes in file path encoding on Windows
    // and then use .cmd to invoke instead of no file extension if Windows
     if (isWindows) webpackBin = `${path.normalize(webpackBin)}.cmd`

    // Now generate an OS-safe find command
    var checkWebpackCommand = `${findOperator} ${webpackBin}`;

    if(enableDebugLog) {
        console.log(`Operating System: ${process.platform}`);
        console.log(`NPM Bin Directory: ${binDir}`);
        console.log(`Local imbapack detected: ${fs.existsSync(path.join(binDir,'imbapack'))}`);
        console.log(`Safe find command: ${checkWebpackCommand}`);
    }

	cp.exec(checkWebpackCommand, function(e,stdout,stderr){
		if (stdout.length == 0) {
			process.stdout.write("Webpack need to be installed:\n");
			process.stdout.write("\tnpm install -g webpack");
			process.exit(1);
		}

		var packer = cp.spawn(webpackBin, args, { env: env, stdio: 'inherit' });
	});
});
